<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>M.S.V.NAVYA SREE</title>
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
  <link href="https://fonts.googleapis.com/css2?family=Baloo+2:wght@400;600;800&amp;family=Nunito:wght@400;700;900&amp;display=swap" rel="stylesheet">
  <script>
    var password = "Navvulu007"; // Change to your desired password
    var input = null;
    while (input !== password) {
      input = prompt("Enter password:");
      if (input === null) { // User clicked "Cancel" or closed the prompt
        document.body.innerHTML = "<h2 style='text-align: center; color: #ff4d4d; font-family: Nunito, sans-serif;'>Access Denied ❌</h2>";
        break; // Exit the loop without throwing an error
      }
      if (input !== password) {
        alert("Incorrect password. Please try again.");
      }
    }
  </script>
  <style>
  :root {
    --bg: #fff9f2;
    --ink: #222;
    --brand: #ff6b6b;
    --brand2: #4dabf7;
    --panel: #ffffff;
    --muted: #666;
    --card: #fff5e6;
    --accent: #845ef7;
    --subject: #d3b7a3;
  }
  * { box-sizing: border-box; }
  body {
    margin: 0;
    background: 
      radial-gradient(circle at 20% 10%, #ffe8cc 0 20%, transparent 20 100%),
      radial-gradient(circle at 80% 0%, #e7f5ff 0 25%, transparent 25 100%),
      radial-gradient(circle at 100% 80%, #e6fcf5 0 20%, transparent 20 100%),
      var(--bg);
    font-family: "Nunito", system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
    color: var(--ink);
  }
  header {
    text-align: center;
    padding: 24px 16px 8px;
  }
  .title {
    font-family: "Baloo 2", cursive;
    font-size: clamp(22px, 3.5vw, 46px);
    margin: 0;
    line-height: 1.1;
    color: #0b7285;
    text-shadow: 0 2px 0 rgba(0,0,0,.08);
  }
  .subtitle {
    margin: 6px 0 0;
    font-weight: 800;
    color: #364fc7;
    letter-spacing: .4px;
  }
  .tabs {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    justify-content: center;
    padding: 12px 16px 18px;
  }
  .chip {
    border: none;
    border-radius: 999px;
    padding: 10px 16px;
    font-weight: 900;
    letter-spacing: .3px;
    color: #fff;
    cursor: pointer;
    transform: translateY(0);
    transition: transform .1s ease, filter .2s ease, box-shadow .2s ease;
    box-shadow: 0 8px 16px rgba(0,0,0,.08), inset 0 -2px 0 rgba(0,0,0,.08);
    user-select: none;
  }
  .chip:hover { transform: translateY(-2px); filter: brightness(1.05); }
  .chip.active { outline: 3px solid #fff; box-shadow: 0 10px 18px rgba(0,0,0,.12); }
  .class-chip { background: linear-gradient(135deg, var(--brand), #f06595); }
  .exam-chip { background: linear-gradient(135deg, var(--brand2), #228be6); }
  .subject-chip { background: linear-gradient(135deg, var(--subject), #b89778); }
  .subtabs { 
    display: none; 
    flex-wrap: wrap; 
    gap: 10px; 
    justify-content: center; 
    padding: 10px 16px; 
  }
  .subtabs.active { display: flex; }
  .subjects { 
    display: none; 
    gap: 10px; 
    flex-wrap: wrap;
    justify-content: center; 
    padding: 12px 16px 18px;
  }
  .subjects.active { display: flex; }
  .container {
    max-width: 1100px;
    margin: 0 auto;
    padding: 0 14px 40px;
    display: none;
  }
  .container.active { display: block; }
  .panel {
    background: var(--panel);
    border-radius: 24px;
    box-shadow: 0 16px 40px rgba(0,0,0,.10);
    padding: 18px;
    border: 4px solid #fff3bf;
  }
  .panelHeader {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    align-items: center;
    justify-content: space-between;
    padding: 6px 8px 16px;
  }
  .select {
    appearance: none;
    padding: 10px 14px;
    border-radius: 14px;
    border: 2px solid #ffd8a8;
    background: #fff;
    font-weight: 800;
    color: #343a40;
    min-width: 260px;
    background-image: linear-gradient(45deg, transparent 50%, #ffa94d 50%), linear-gradient(135deg, #ffa94d 50%, transparent 50%), linear-gradient(to right, #ffd8a8, #ffd8a8);
    background-position: calc(100% - 18px) calc(1em + 2px), calc(100% - 13px) calc(1em + 2px), calc(100% - 2.5em) 0.5em;
    background-size: 6px 6px, 6px 6px, 1px 2em;
    background-repeat: no-repeat;
  }
  .meta {
    display: flex;
    gap: 10px;
    align-items: center;
    flex-wrap: wrap;
  }
  .badge {
    padding: 8px 12px;
    border-radius: 999px;
    font-weight: 900;
    color: #fff;
    letter-spacing: .3px;
    background: linear-gradient(135deg, #ff922b, #f03e3e);
  }
  .progressWrap {
    width: 100%;
    background: #fff5e6;
    border-radius: 12px;
    padding: 6px;
  }
  .progressBar {
    height: 14px;
    background: linear-gradient(90deg, #69db7c, #22b8cf);
    border-radius: 10px;
    width: 0%;
    transition: width .25s ease;
  }
  .qaCard {
    margin-top: 12px;
    border-radius: 20px;
    padding: 18px;
    background: linear-gradient(145deg, #fff, #fff7ec);
    border: 2px dashed #ffe066;
  }
  .q {
    font-weight: 900;
    font-size: clamp(16px, 2.2vw, 24px);
  }
  .a {
    margin-top: 12px;
    padding: 14px;
    border-radius: 12px;
    background: #f1f3f5;
    color: #8A3E2B;
    font-weight: 800;
    display: none;
    border: 2px solid #c3fae8;
  }
  .controls {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    margin-top: 16px;
  }
  .btn {
    border: none;
    border-radius: 14px;
    padding: 12px 16px;
    font-weight: 900;
    cursor: pointer;
    letter-spacing: .3px;
    color: #fff;
    box-shadow: 0 8px 18px rgba(0,0,0,.12);
    transition: transform .1s ease, filter .15s ease;
  }
  .btn.primary { background: linear-gradient(135deg, #845ef7, #5c7cfa); }
  .btn.success { background: linear-gradient(135deg, #12b886, #51cf66); }
  .btn.secondary { background: linear-gradient(135deg, #ffa94d, #fd7e14); }
  .btn:hover { transform: translateY(-2px); filter: brightness(1.05); }
  .text-size-controls {
    display: flex;
    gap: 8px;
    align-items: center;
  }
  .text-size-btn {
    border: none;
    border-radius: 8px;
    padding: 8px 12px;
    font-weight: 700;
    cursor: pointer;
    background: linear-gradient(135deg, #adb5bd, #868e96);
    color: #fff;
    transition: transform .1s ease, filter .15s ease;
  }
  .text-size-btn:hover { transform: translateY(-2px); filter: brightness(1.05); }
  .kudos {
    margin-top: 8px;
    color: #5c7cfa;
    font-weight: 900;
  }
  .tiny {
    color: var(--muted);
    font-size: 12px;
  }
  .pill {
    display: inline-block;
    background: #e7f5ff;
    color: #1971c2;
    padding: 6px 10px;
    border-radius: 999px;
    font-weight: 800;
    margin-right: 6px;
  }
  footer {
    text-align: center;
    color: #868e96;
    padding: 20px 10px;
    font-size: 13px;
  }
  </style>
</head>
<body>
  <script type="text/javascript">
        var gk_isXlsx = false;
        var gk_xlsxFileLookup = {};
        var gk_fileData = {};
        function filledCell(cell) {
          return cell !== '' && cell != null;
        }
        function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];
                var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
                var filteredData = jsonData.filter(row => row.some(filledCell));
                var headerRowIndex = filteredData.findIndex((row, index) =>
                  row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                  headerRowIndex = 0;
                }
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex));
                csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
        }
  </script>
  <header>
    <h1 class="title">M.S.V.NAVYA SREE</h1>
    <p class="subtitle">Tap a class → select an exam → pick a subject → view one question at a time. Click “Show Answer” when ready!</p>
  </header>
  <div class="tabs" id="classTabs"></div>
  <div class="subtabs" id="subTabs"></div>
  <div class="subjects" id="subjectTabs"></div>
  <div class="container" id="quizContainer">
    <div class="panel">
      <div class="panelHeader">
        <select id="sectionSelect" class="select" aria-label="Choose Section"></select>
        <div class="meta">
          <span class="badge" id="subjectBadge">Subject</span>
          <span class="pill" id="counterPill">Q 1 / 1</span>
        </div>
        <div class="progressWrap" style="flex:1 1 100%">
          <div class="progressBar" id="progressBar"></div>
        </div>
      </div>
      <div class="qaCard">
        <div class="text-size-controls">
          <button class="text-size-btn" id="increaseTextSize" title="Increase Text Size">+</button>
          <button class="text-size-btn" id="decreaseTextSize" title="Decrease Text Size">−</button>
        </div>
        <div class="q" id="questionText">Choose a subject to start!</div>
        <div class="a" id="answerText">Answer will appear here.</div>
        <div class="controls">
          <button class="btn secondary" id="prevBtn" title="Previous Question">⟵ Previous</button>
          <button class="btn primary" id="showBtn" title="Show Answer">Show Answer 👀</button>
          <button class="btn success" id="nextBtn" title="Next Question">Next ⟶</button>
        </div>
        <div class="kudos" id="kudos" style="display:none;">🎉 Great job! You finished this section. Pick another section or subject!</div>
        <div class="tiny" id="metaInfo"></div>
      </div>
    </div>
  </div>
  <footer>
    © SA-1 Practice • Colorful quiz made for kids 💫
  </footer>
  <script>
  const quizData = {
    "Class3": {
      "SA1": {
        "English": {
    "II. Literature – ‘A Bird Came Down the Walk’": [
      { q: "Who came down the walk?", a: "A bird came down the walk." }
    ],
    "Prose – ‘The Story of a Lizard, a Tiger and a Farmer’": [
      { q: "Who were fighting in the jungle?", a: "A Lizard and a tiger were fighting in the jungle." }
    ],
    "III. Meanings": [
      { q: "Meaning of: Club", a: "A sports team." }
    ],
    "IV. True or False": [
      { q: "Shikari loved playing football, but he did not like playing hockey.", a: "True." }
    ],
    "V. Complete the Sentences": [
      { q: "______ London is ______ capital of England.", a: "London is the capital of England." }
    ],
    "VI. Material Nouns (Underline)": [
      { q: "In winters, people wear clothes made of ______.", a: "wool" }
    ],
    "VII. Matching (Pronouns)": [
      { q: "Meera → ?", a: "She" }
    ],
    "VIII. Plural Forms": [
      { q: "One book → two ______", a: "books" }
    ],
    "IX. Tick the Correct Answer": [
      { q: "To make a cup, the potter asked for…", a: "Mud." }
    ],
    "X. Reflexive Pronouns": [
      { q: "Payal and I often make supper for us / ourselves.", a: "ourselves" }
    ],
    "XI. Extracts": [
      { q: "“Can I have your autograph please” – Who said this to whom?", a: "Luke said these words to PELE." }
    ],
    "XII. Long Answers": [
      { q: "Why was Luke sitting on the bench in the beginning of the story?", a: "Luke was sitting on the bench in the beginning of the story because his leg got injured." }
    ],
    "XIII. Picture Composition": [
      { q: "What does the picture show?", a: "Children at the park." }
    ]
  },
  "Social": {
    "Section A – MCQs": [
      { q: "Which is an artificial fibre?", a: "Nylon." }
    ],
    "Section B – Very Short": [
      { q: "Three things clothes protect from?", a: "Heat, Cold, Rain." }
    ],
    "Section C – Short": [
      { q: "Why do we wear clothes?", a: "Cotton keeps us cool and absorbs sweat." }
    ],
    "Section D – Long": [
      { q: "Traditional clothes of three states.", a: "Punjab: Salwar-Kamiz, Kurta-Pajama; West Bengal: Saree, Dhoti; Tamil Nadu: Saree, Veshti." }
    ],
    "Section E – Case & Picture": [
      { q: "Nagaland festival shown in picture?", a: "Hornbill Festival." }
    ]
  },
  "Science": {
    "Section A – MCQs": [
      { q: "Table, pencil and eraser are examples of a) Living things b) Non- Living things  c) Both", a: "Non-living things." }
    ],
    "Unscramble the words": [
      { q: "AHSKR", a: "SHARK" }
    ],
    "Section B – Very Short": [
      { q: "Name any two animals which lay eggs.", a: "nimals which lay eggs are bird and fish." }
    ],
    "Section C – Short": [
      { q: "What are living things?", a: "Living things can grow, breathe, had food and water." }
    ],
    "Section D – Long": [
      { q: "How are Non-living things group? Give examples of each.", a: "Non-living things are grouped into natural and man-made things.  1. Natural things: found in nature. Example - Rocks water and air.   2.Man-made things: made by people. Examples - Car, toys, and buildings." }
    ]
  },
  "Telugu": {
    "V. ప్రశ్నలకు జవాబులు": [
      { q: "ప్రత్యక్ష దైవాలు అంటే అర్థం ఏమిటి?", a: "A) ప్రత్యక్ష దైవాలు అంటే మంకు కళ్ళముందు కనిపించే దేవుళ్ళు తల్లి, తండ్రి మరియు గురువు" }
    ],
    "VI. పఠనం – జవాబులు": [
      { q: "ఉపాధ్యాయులు ఎక్కడ కనబడినా ఎలా నమస్కరించాలి?", a: "వినయంతో నమస్కరించాలి." }
    ],
    "VII. పద్య క్రమపరచు": [
      { q: "‘వినయము లేనట్టి చదువు…’ పద్యాన్ని సరైన క్రమంలో వ్రాయండి.", a: "వినయము లేనట్టి చదువు / అనయము మఱి చేటు చేయు అవనిని ప్రజకున్ / ఘనతను కూర్చెడి చదువుకు / వినయమె ఇలా శోభనిచ్చు వినర శిష్యా!" }
    ],
    "VIII. అక్షర విభజన [అమ్మ, లక్ష, నాన్న, మేస్త్రి, అక్క, పద్మ, లక్ష్యము, అన్న, ప్రత్యేకము, వస్త్రము ]": [
      { q: "ద్విత్వాక్షరములు – ఏవి?", a: "అమ్మ, నాన్న, అక్క, అన్న." }
    ]
  },
  "Computer Science": {
    "I. Jumbled Words": [
      { q: "laitifcairtraeiletgcnniil", a: "Artificial Intelligence" }
    ],
   "II. Missing Letters": [
      { q: "Ar_ificial Inte_ligenc_", a: "Artificial Intelligence" }
    ],
    "III. Fill in the Blanks": [
      { q: "Artificial intelligence is the intelligence created by __________", a: "Humans" }
    ],
    "IV. True/False": [
      { q: "AI machines cannot think and carry out tasks the way humans do", a: "False" }
    ],
    "V. Choose the Right Answer": [
      { q: "Which of the following is a picture of the vacuum cleaner?", options: ["Drone", "Vacuum cleaner", "Hair dryer"], a: "Vacuum cleaner" }
    ],
    "VI. Identify the pictures": [
      {"Input Devices": ["Webcam", "Touchpad", "Scanner", "Biometric Devices", "Voice Input Devices"],"Output Devices": ["Monitor", "Printer", "3D printer", "Speakers", "Headphones"],"Storage Devices": ["Hard Disk", "CD/DVD", "Pendrive"]}
    ],
   "VIII. Mind Map of uses of AI": [
      { q: "Write the uses of AI in mind map.", a: "Uses of AI - 1. Agriculture, 2. Gaming, 3. Smart Security 4. Online Shopping 5. Energy Saving." }
    ],
    "VIII. Answer the following": [
      { q: "Write the full form of AI.", a: "AI stands for Artificial Intelligence." }
    ]
  },
  "General Knowledge": {
    "I. Fill in the Blanks": [
      { q: "First to win an Olympic gold medal in athletics ________", a: "Neeraj Chopra" }
    ],
    "II. Match the following": [
      { q: "Bihu", a: "Assam" }
    ],
   "III. Choose the Odd One out": [
      { q: "Tomato, Cabbage, Cucumber, Cauliflower", a: "Tomato" }
    ],
   "IV. Choose the correct answer": [
      { q: "Which of these harms the Environment?", a: "Plastic" }
    ],
   "V. Treu or False": [
      { q: "Onam is celebrated by making floral Rangoli.", a: "True" }
    ],
   "VI. Identify the Picture": [
      { q: "Picture shown", a: "Parrot" }
    ]
  },
  "Value Education": {
    "I. Answer the following": [
      { q: "Write three things that make nature beautiful.", a: "The three things that make nature beautiful are Trees, Flowers, Rivers, Forests, Cool Breeze, Stars, Sunshine bright, Stars at night, Fluffy clouds, Trees, Singing birds, Good Friends" }
    ],
     "II. Fill in the blanks": [
      { q: "I'm thankful for the ________", a: "sunshine bright" }
    ],
    "III. Yes or No": [
      { q: "Raja followed Kamla di around the house", a: "No" }
    ],
    "IV. Match the following": [
      { q: "Shweta Chari", a: "Toy Bank" }
    ],
   "V. Situation based questions": [
      { q: "It's your Grandmother's birthday today.", a: "make a card for her" }
    ],
   "VI. Coose the correct answer": [
      { q: "Circle the tasks that you do on your own Tick (√) the tasks that your parents help you to do. 1. Clear your study table 2. Have a bath 3. Brush your teeth 4.Make your bed",a: "Circled tasks - 1. Clear your study table 2. Have a bath 3. Brush your teeth; Ticked tasks - 4.Make your bed" }
    ]
        }
      }
    }
  };

  const classTabs = document.getElementById('classTabs');
  const subTabs = document.getElementById('subTabs');
  const subjectTabsDiv = document.getElementById('subjectTabs');
  const quizContainer = document.getElementById('quizContainer');
  const sectionSelect = document.getElementById('sectionSelect');
  const subjectBadge = document.getElementById('subjectBadge');
  const counterPill = document.getElementById('counterPill');
  const questionText = document.getElementById('questionText');
  const answerText = document.getElementById('answerText');
  const showBtn = document.getElementById('showBtn');
  const nextBtn = document.getElementById('nextBtn');
  const prevBtn = document.getElementById('prevBtn');
  const progressBar = document.getElementById('progressBar');
  const kudos = document.getElementById('kudos');
  const metaInfo = document.getElementById('metaInfo');
  const increaseTextSize = document.getElementById('increaseTextSize');
  const decreaseTextSize = document.getElementById('decreaseTextSize');

  let state = {
    class: null,
    exam: null,
    subject: null,
    section: null,
    index: 0,
    revealed: false,
    textSize: 1
  };

  function initClasses() {
    if (!classTabs || !subTabs || !subjectTabsDiv || !quizContainer) {
      console.error('One or more required DOM elements are missing.');
      return;
    }
    const classes = ['Class1', 'Class2', 'Class3', 'Class4', 'Class5', 'Class6', 'Class7', 'Class8', 'Class9', 'Class10'];
    classTabs.innerHTML = '';
    classes.forEach((c) => {
      const btn = document.createElement('button');
      btn.className = 'chip class-chip';
      btn.textContent = c;
      btn.onclick = () => selectClass(c, btn);
      classTabs.appendChild(btn);
    });
    subTabs.classList.remove('active');
    subjectTabsDiv.classList.remove('active');
    quizContainer.classList.remove('active');
  }

  function selectClass(cls, btn) {
    if (!classTabs || !subTabs || !subjectTabsDiv || !quizContainer) return;
    [...classTabs.children].forEach(b => b.classList.remove('active'));
    btn.classList.add('active');
    state.class = cls;
    state.exam = null;
    state.subject = null;
    state.section = null;
    subTabs.innerHTML = '';
    subjectTabsDiv.innerHTML = '';
    sectionSelect.innerHTML = '';
    questionText.textContent = 'Choose a subject to start!';
    answerText.textContent = 'Answer will appear here.';
    subjectTabsDiv.classList.remove('active');
    quizContainer.classList.remove('active');
    initSubTabs();
  }

  function initSubTabs() {
    if (!subTabs) return;
    const exams = ['CT1', 'CT2', 'CT3', 'CT4', 'SA1', 'SA2'];
    subTabs.innerHTML = '';
    exams.forEach((exam) => {
      const btn = document.createElement('button');
      btn.className = 'chip exam-chip';
      btn.textContent = exam;
      btn.onclick = () => selectExam(exam, btn);
      subTabs.appendChild(btn);
    });
    subTabs.classList.add('active');
  }

  function selectExam(exam, btn) {
    if (!subTabs || !subjectTabsDiv || !quizContainer) return;
    [...subTabs.children].forEach(b => b.classList.remove('active'));
    btn.classList.add('active');
    state.exam = exam;
    state.subject = null;
    state.section = null;
    subjectTabsDiv.innerHTML = '';
    sectionSelect.innerHTML = '';
    questionText.textContent = 'Choose a subject to start!';
    answerText.textContent = 'Answer will appear here.';
    quizContainer.classList.remove('active');
    initSubjects();
  }

  function initSubjects() {
    if (!subjectTabsDiv) return;
    const subjects = Object.keys(quizData[state.class]?.[state.exam] || {});
    subjectTabsDiv.innerHTML = '';
    subjects.forEach((s) => {
      const btn = document.createElement('button');
      btn.className = 'chip subject-chip';
      btn.textContent = s;
      btn.onclick = () => selectSubject(s, btn);
      subjectTabsDiv.appendChild(btn);
    });
    subjectTabsDiv.classList.add('active');
    if (subjects.length && state.class === 'Class3' && state.exam === 'SA1') {
      subjectTabsDiv.firstElementChild.click();
    }
  }

  function selectSubject(subj, btn) {
    if (!subjectTabsDiv || !quizContainer || !subjectBadge) return;
    [...subjectTabsDiv.children].forEach(b => b.classList.remove('active'));
    btn.classList.add('active');
    state.subject = subj;
    subjectBadge.textContent = subj;
    populateSections();
    quizContainer.classList.add('active');
  }

  function populateSections() {
    if (!sectionSelect) return;
    const sections = Object.keys(quizData[state.class]?.[state.exam]?.[state.subject] || {});
    sectionSelect.innerHTML = '';
    sections.forEach((sec) => {
      const opt = document.createElement('option');
      opt.value = sec;
      opt.textContent = sec;
      sectionSelect.appendChild(opt);
    });
    if (sections.length) {
      sectionSelect.value = sections[0];
      selectSection(sections[0]);
    } else {
      renderQA({ q: "No sections found. Please add data.", a: "" });
    }
  }

  sectionSelect.addEventListener('change', (e) => selectSection(e.target.value));

  function selectSection(section) {
    if (!kudos) return;
    state.section = section;
    state.index = 0;
    state.revealed = false;
    kudos.style.display = 'none';
    updateQA();
  }

  function getCurrentList() {
    if (!state.class || !state.exam || !state.subject || !state.section) return [];
    return quizData[state.class]?.[state.exam]?.[state.subject]?.[state.section] || [];
  }

  function updateQA() {
    if (!counterPill || !progressBar || !metaInfo || !prevBtn || !nextBtn || !kudos) return;
    const list = getCurrentList();
    const total = list.length || 1;
    if (!list.length) {
      renderQA({ q: "No questions in this section yet. Add items to quizData!", a: "" });
      counterPill.textContent = `Q 0 / 0`;
      progressBar.style.width = '0%';
      metaInfo.textContent = '';
      return;
    }
    if (state.index >= total) {
      state.index = total - 1;
    }
    const item = list[state.index];
    renderQA(item);
    counterPill.textContent = `Q ${state.index + 1} / ${total}`;
    progressBar.style.width = `${Math.round(((state.index + 1) / total) * 100)}%`;
    metaInfo.textContent = `${state.subject} • ${state.section}`;
    prevBtn.disabled = state.index === 0;
    nextBtn.disabled = state.index >= total - 1;
    kudos.style.display = (state.index === total - 1) ? 'block' : 'none';
  }

  function renderQA(item) {
    if (!questionText || !answerText || !showBtn) return;
    questionText.textContent = item.q;
    answerText.textContent = item.a;
    state.revealed = false;
    answerText.style.display = 'none';
    showBtn.textContent = 'Show Answer 👀';
    updateTextSize();
  }

  function updateTextSize() {
    if (!questionText || !answerText) return;
    questionText.style.fontSize = `${clamp(16 * state.textSize, 2.2 * state.textSize, 24 * state.textSize)}px`;
    answerText.style.fontSize = `${14 * state.textSize}px`;
  }

  function clamp(min, val, max) {
    return Math.min(Math.max(min, val), max);
  }

  showBtn.addEventListener('click', () => {
    if (!answerText || !showBtn) return;
    state.revealed = !state.revealed;
    answerText.style.display = state.revealed ? 'block' : 'none';
    showBtn.textContent = state.revealed ? 'Hide Answer 🙈' : 'Show Answer 👀';
  });

  nextBtn.addEventListener('click', () => {
    const list = getCurrentList();
    if (!list.length) return;
    if (state.index < list.length - 1) {
      state.index++;
      updateQA();
    }
  });

  prevBtn.addEventListener('click', () => {
    if (state.index > 0) {
      state.index--;
      updateQA();
    }
  });

  increaseTextSize.addEventListener('click', () => {
    state.textSize = Math.min(state.textSize + 0.1, 1.5);
    updateTextSize();
  });

  decreaseTextSize.addEventListener('click', () => {
    state.textSize = Math.max(state.textSize - 0.1, 0.8);
    updateTextSize();
  });

  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowRight') nextBtn.click();
    if (e.key === 'ArrowLeft') prevBtn.click();
    if (e.key === ' ') { e.preventDefault(); showBtn.click(); }
    if (e.key === '+') increaseTextSize.click();
    if (e.key === '-') decreaseTextSize.click();
  });

  initClasses();
  </script>
</body>
</html>